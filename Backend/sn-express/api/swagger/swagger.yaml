swagger: "2.0"
info:
  version: "0.0.1"
  title: Hello World App
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
tags:
  - name: User
    description: Everything about the user
  - name: Advertisement
    description: Everything about advertisements
  - name: Main
    description: Main screen
paths:
  /user:
    post:
      tags:
        - User
      summary: Create a new user
      operationId: createUser
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: New user parameters
          schema:
            $ref: '#/definitions/CreateUser'
      responses:
        '200':
          description: User created
        '400':
          description: Username or password is missing
  '/user/{name}':
    get:
      tags:
        - User
      summary: Find a user by name
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of an user
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/UserInfo'
    put:
      tags:
        - User
      summary: Updates an user
      description: This can be done by the logged in user.
      operationId: updateUserInfo
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: name
          in: path
          description: Name of the user that needs to be updated
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserInfo'
      responses:
        '200':
          description: Successful operation
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: Successful operation
  /ads:
    post:
      tags:
        - Advertisement
      summary: Uploading a new ad
      operationId: uploadNewAd
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          description: The datas of the flat/house
          schema:
            $ref: '#/definitions/FlatInfo'
      responses:
        '200':
          description: Successful operation
  '/ads/{id}':
    get:
      tags:
        - Advertisement
      summary: Get the info of an advertisement
      operationId: getAdvertisementById
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the ad
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/FlatInfo'
    put:
      tags:
        - Advertisement
      summary: Updates an advertisement
      description: This can be done by the owner of the advertisement.
      operationId: updateFlatInfo
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the ad
          required: true
          type: string
        - name: body
          in: body
          required: true
          description: The datas of the flat/house
          schema:
            $ref: '#/definitions/FlatInfo'
      responses:
        '200':
          description: Successful operation
  /main:
    get:
      tags:
        - Main
      summary: The main screen after the login
      description: Random advertisements
      operationId: getRandomAds
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/FlatInfoTile'
definitions:
  CreateUser:
    type: object
    properties:
      name:
        type: string
      password:
        type: string
        format: password
  UserInfo:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      address:
        type: string
      age:
        type: integer
        format: int32
  FlatInfo:
    type: object
    properties:
      id:
        type: string
      owner:
        type: string
      description:
        type: string
      address:
        type: object
        properties:
          street:
            type: string
          city:
            type: string
      flatImage:
        type: array
        items:
          type: string
          format: binary
      price:
        type: integer
        format: int32
  FlatInfoTile:
    type: array
    items:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        flatImage:
          type: string
          format: binary
